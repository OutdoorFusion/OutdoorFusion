# Volgens mij is dit oud maar ik durf het niet zeker te zeggen
# @app.route('/customer_data')
# def customer_data():
#     field_a = request.args.get('field_a')
#     field_b = request.args.get('field_b')
    
#     if field_a == 'customer_age':
#         value_a = data['Customer_Age'].mean()
#     elif field_a == 'country':
#         value_a = data['Country'].value_counts().idxmax()
#     else:
#         return jsonify(error='Invalid field A')
    
#     if field_b == 'customer_age':
#         value_b = data['Customer_Age'].mean()
#     elif field_b == 'country':
#         value_b = data['Country'].value_counts().idxmax()
#     else:
#         return jsonify(error='Invalid field B')
    
#     return jsonify(value_a=value_a, value_b=value_b)




# Create a route to retrieve table options


# @app.route('/chartMonthlyPerformance')
# def chartMonthlyPerformance():
#     selected_product = request.args.get('product')

#     # Filter the data based on the selected product
#     product_data = data[data['Product'] == selected_product]

#     # Check if product data exists
#     if product_data.empty:
#         return jsonify(error='Selected product not found')

#    # Sort the data by date
#     product_data = product_data.sort_values('Date')

#     # Prepare the data for the line graph
#     variables = ['Unit_Cost', 'Unit_Price', 'Profit', 'Order_Quantity', 'Revenue']
#     chart_data = []

#     for variable in variables:
#         changes = product_data.groupby('Month')[variable].diff().fillna(0).tolist()
#         months = product_data['Month'].tolist()
#         chart_item = {
#             'variable': variable,
#             'months': months,
#             'changes': changes
#         }
#         chart_data.append(chart_item)

#     return jsonify(chartData=chart_data)
